<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jean's Blog]]></title>
  <link href="http://ziwu1216.github.com/atom.xml" rel="self"/>
  <link href="http://ziwu1216.github.com/"/>
  <updated>2013-01-11T23:30:31+08:00</updated>
  <id>http://ziwu1216.github.com/</id>
  <author>
    <name><![CDATA[Jean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于毕业设计]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/01/11/about-graduation-project/"/>
    <updated>2013-01-11T23:02:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/01/11/about-graduation-project</id>
    <content type="html"><![CDATA[<p>这周听了师兄师姐们的毕业设计答辩，老师给的一些意见都很中肯也很有意义。</p>

<!--more-->


<h2>关于论文编排</h2>

<ul>
<li>论文中要对涉及到的基本概念进行阐释，因为不是所有人都熟悉你做的内容，但是篇幅也不能太多</li>
<li>用到的图像要清晰美观，如果是照片之类的请保持微笑:)</li>
<li>论文排版要注意

<h2>关于论文内容</h2></li>
<li>测试集要尽量大，这样结论才有说服力</li>
<li>在优化时，第一个考虑的其实是根据实际情况筛选，排除不需要进行处理的情况，这是最彻底的减轻运算量的方法</li>
<li>经典算法的改进效果要实事求是，大家都知道经典算法的情况，所以改进效果太好的话容易引起质疑，必须要有强力的理论和测试支撑才行</li>
<li><p>对自己成果的描述口吻要客观，分清“提出了”和“改进了”</p>

<h2>关于ppt演讲</h2>

<p>以下这些就是我自己的感觉了</p></li>
<li><p>演讲时的语速语调真的对演讲效果有很大影响的，语调振奋一点可能比较好，平淡无起伏的声音比较像读书，让人昏昏欲睡</p></li>
<li>内容和时间要把握好，宁可提前删减一些内容，也不要用加快语速的方法，听众会跟不上思路。<br/>
我自己好像是习惯快语速，还总想略讲一些内容，不管时间够不够，不知道是不是由于紧张，一定要有意识地改进</li>
<li>检查ppt，不要出现错别字等等，否则容易让人觉得自己对这次演讲重视不够</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello octopress 2：流程记录]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/01/05/hello-octopress-2/"/>
    <updated>2013-01-05T18:01:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/01/05/hello-octopress-2</id>
    <content type="html"><![CDATA[<p>打了一段时间页游，好久不更新这里了，果然意志不坚啊。再写的时候生疏了很多，所以简单记录一下整个流程，方便以后参考。</p>

<!--more-->


<p>进入octopress的目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /directory/to/octopress</span></code></pre></td></tr></table></div></figure>


<p>使配置生效。这个应该可以改变写配置命令的地方使其自动生效吧，我懒得改了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>生成新博客，注意方括号之前不要留空格</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>修改生成的页面，其中category的写法是这样滴</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Multiple categories example 1
</span><span class='line'>categories: [CSS3, Sass, Media Queries]</span></code></pre></td></tr></table></div></figure>


<p>写好后在本机4000端口实时预览</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>生成文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate </span></code></pre></td></tr></table></div></figure>


<p>发布文件到github</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy </span></code></pre></td></tr></table></div></figure>


<p>搞定！</p>

<p>可以不时备个份</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "changes"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Primer 读书笔记 1]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/01/05/c-plus-plus-primer-notes-1/"/>
    <updated>2013-01-05T15:50:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/01/05/c-plus-plus-primer-notes-1</id>
    <content type="html"><![CDATA[<p>最近在看一些源代码，立刻发现自己的C++功底相当的弱，于是决定静心开始读经典的《C++ Primer》中文版，开头似乎是入门的知识，所以决定做些笔记，偶尔加些自己的验证。这样以后直接翻笔记就行了。笔记很零碎，感觉很适合C++考试的选择题……汗。</p>

<p>书籍信息：C++ Primer 中文版（第4版）Stanley B. Lippman, Josee Lajoie, Barbara E. Moo 著；李师贤等译；人民邮电出版社</p>

<p>以下为第一章笔记。</p>

<!--more-->


<h2>第一章</h2>

<h3>1.1</h3>

<ul>
<li><p>返回值必须和函数的返回类型相同，或者可以转换成函数的返回类型<br/>
【需要返回double时可以return int，反之不行】</p></li>
<li><p>常见C++程序文件后缀： *.cc *.cxx *.cpp *.cp *.C</p></li>
</ul>


<h3>1.2</h3>

<ul>
<li><p>iostream库的基础是两种命名为istream和ostream的类型，分别表示输入流和输出流。标准库定义了4个IO对象，处理输入时使用命名为cin的istream类型对象，也称为标准输入。处理输出时使用命名为cout的ostream类型对象，也称为标准输出。另外，cerr和clog都是ostream对象。<br/>
【都忘了原来istream是类啊】</p></li>
<li><p>输出操作符&lt;&lt;：接受两个操作数，左操作数必须是ostream对象，右操作数是要输出的值，返回输出流本身（即左操作数）。输入操作符类推。</p></li>
<li><p>endl称为操纵符（manipulator），换行，刷新与设备相关联的缓冲区，用户立即看到写入到流中的输出。忘记刷新输出流可能会造成输出停留在缓冲区中，如果程序崩溃，将会导致对程序崩溃位置的错误推断。</p></li>
<li><p>使用命名空间，可以避免由于无意中使用了与库中所定义名字相同的名字而引起冲突。从而我们可以使用与标准库相同的名字。</p></li>
<li><p>空格符不允许出现在预处理指示中<br/>
【<br/>
预处理是指在编译前所作的工作。例如#include, #define等<br/>
带参宏定义中，宏名和形参表之间不能有空格出现<br/>
例如<code>#define MAX(a,b) (a&gt;b)?a:b</code>不能写成<code>#define MAX (a,b) (a&gt;b)?a:b</code><br/>
】</p></li>
</ul>


<h3>1.3</h3>

<ul>
<li>注释对不可嵌套。临时忽略一段代码更好的方法，是用编辑器在要忽略的每一行代码前面插入单行注释//，这样就无需担心是否已包含注释对/**/</li>
</ul>


<h3>1.4</h3>

<ul>
<li><p>for(int val = 1; val &lt;= 10; ++ val)执行顺序：</p>

<ol>
<li>创建val并初始化为1</li>
<li>测试val是否&lt;= 10<br/>
【<br/>
第一次进入时就要测试！！<br/>
<code>for(int val = 11; val &lt;= 10; ++ val) cout&lt;&lt;val&lt;&lt;endl;</code><br/>
不会有输出<br/>
】</li>
<li>如果是，则执行for循环体；如果不是，则退出循环</li>
<li>Val递增</li>
<li>重复第2步的测试</li>
</ol>
</li>
<li><p>读入未知数目的输入<br/>
<code>while(cin &gt;&gt; value) sum += value;</code><br/>
测试cin，即测试流的状态。如果流有效，测试成功。遇到文件结束符或无效输入【如类型和value不符合】，条件失败。<br/>
【</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在输入<code>1 2 3 回车</code>后会显示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以继续输入。<br/>
在输入<code>1 2 3 ^Z 回车</code>或<code>1 2 3 str 回车</code>后会显示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="n">str</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="err">请按任意键继续</span><span class="p">.</span> <span class="p">.</span> <span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>不可以继续输入。<br/>
回车的作用：windows是行缓冲，只有按下回车后，系统才会将输入的这一行数据存放到程序的输入缓存中。<br/>
】</p>

<ul>
<li>文件结束符，windows下ctrl+z，unix下ctrl+d</li>
</ul>


<h3>1.5</h3>

<ul>
<li>标准库的头文件用&lt;>， 非标准库的文件用””</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello octopress]]></title>
    <link href="http://ziwu1216.github.com/blog/2012/11/28/hello-octopress/"/>
    <updated>2012-11-28T13:56:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2012/11/28/hello-octopress</id>
    <content type="html"><![CDATA[<p>理论上来说，这才应该是我第一篇博客……描述博客的搭建过程。只是作为一个博客菜鸟 + octopress菜鸟 + linux菜鸟，我其实也是依葫芦画瓢，照着官网的步骤和别人的博客一步一步做的。所以过程就不赘述了，列一下我的主要参考网站和解决的一些小问题吧</p>

<!--more-->


<h2>主要参考网站</h2>

<ul>
<li><p><a href="http://octopress.org/">octopress官网</a></p>

<p>  官网的文档写的非常简明清晰，其实不需要其他教程，基本上照着做就行了</p></li>
<li><p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">搭建参考</a></p>

<p>  这篇博文总结了根据国内需求进行的一些配置，比如删除twitter和增加分享到国内微博等等</p></li>
<li><p><a href="http://wowubuntu.com/markdown/#link">markdown语法</a></p>

<p>  我是最近用github之后才开始接触markdown的，所以还是经常要查一下语法</p></li>
</ul>


<h2>遇到的问题</h2>

<h3>用rbenv安装ruby</h3>

<p>我不得不说，如果没有特殊理由的话，还是用rvm吧……万一遇到问题，网上可以搜到很多解决方法。我没了解过ruby，随意挑了rbenv来安装，过程实在是纠结……</p>

<h4>1.ruby的版本</h4>

<p>官网上在<a href="http://octopress.org/docs/setup/rbenv/">Installing Ruby With Rbenv</a>页面说用<code>rbenv install 1.9.3-p0</code>安装ruby，但我clone的octopress项目中<code>.rbenv-version</code>文件其实写的是<code>1.9.3-p194</code>，所以会提示版本未安装。直接按照<code>.rbenv-version</code>里要求的版本安装就行。</p>

<h4>2.缺少zlib依赖</h4>

<pre><code>sudo apt-get install zlib1g-dev
</code></pre>

<h4>3.缺少openssl依赖</h4>

<p>这个问题纠结了我半天，反复卸载安装了好几次。网上的解决方案大多是针对rvm的，搜寻资料也很痛苦。最后在<a href="https://gist.github.com/1200482">这里</a>找到了解决方案</p>

<p>安装依赖库，我开始只安装了openssl，是不够的</p>

<pre><code>sudo apt-get install openssl
sudo apt-get install libssl-dev
sudo apt-get install libssl0.9.8
</code></pre>

<p>安装rbenv，按照官网来就行</p>

<p>安装ruby-build</p>

<pre><code>git clone git@github.com:sstephenson/ruby-build.git
cd ruby-build
./install.sh
</code></pre>

<p>然后才能安装ruby</p>

<pre><code>ruby-build 1.9.3-p194 ~/.rbenv/versions/1.9.3-p194 --with-openssl-dir=/usr/local
rbenv rehash
</code></pre>

<p>如果要设置全局ruby的版本的话可以用<code>rbenv global 1.9.3-p194</code></p>

<p>进入octopress文件夹下可以查询ruby是否安装成功<code>ruby -v</code></p>

<p>检查下openssl是否正常，应该返回<code>true</code></p>

<pre><code>irb
require 'openssl' 
</code></pre>

<h3>用root用户<code>rake deploy</code>时提示ssh密钥错误</h3>

<p>这大概是只有我这种小白才会犯的错误……是因为root用户和普通用户存放密钥的文件夹不一样，所以尽量用同一个用户操作，或者把密钥拷贝一份</p>

<h3>添加Jiathis分享插件时显示一小块空白</h3>

<p>参考<a href="http://geeksavetheworld.com/blog/2012/11/05/add-jiathis-to-octopress-blog/">这篇博文</a></p>

<h3>在侧栏添加分类列表</h3>

<p>我主要是觉得侧栏太空了……参考<a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">这篇博文</a></p>

<h2>其他</h2>

<p>其实对octopress博客的个性化还有很多，可以搜到很多教程，只是我比较懒。作为有一个菜鸟，我觉得默认主题已经很漂亮啦:)</p>

<p>我之前做项目接触了github，然后搜教程的时候突然发现可以用它写博客，所以一时好奇才写的。希望能记录下平时看到或者学到的东西，虽然水平有限，不值一哂，但对我自己来说毕竟是花过力气的东西，还是留些痕迹做纪念吧，也省得经常觉得自己很颓废</p>

<p>最近会整理一些以前的文档，用【旧】标注的文章可能会有些过时。我其实是个好奇心甚重的人，但是有点浅尝辄止的毛病，所以可以预感到我的“helloworld”分类下会有很多乱七八糟的东西……</p>

<h3>希望我能坚持下去</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『旧』 hello android 1.0：Linux下开发环境搭建]]></title>
    <link href="http://ziwu1216.github.com/blog/2012/11/26/old-hello-android-1-dot-0/"/>
    <updated>2012-11-26T23:32:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2012/11/26/old-hello-android-1-dot-0</id>
    <content type="html"><![CDATA[<p>这是4月左右写的，软件的版本可能比较旧了，仅供参考</p>

<p>以下为搭建过程，包括文件下载、java安装、eclipse和ADT安装、SDK Manager配置等</p>

<!--more-->


<h2>需要准备的安装文件</h2>

<ul>
<li>android-sdk_r17-linux.tgz</li>
<li>ADT-17.0.0.zip</li>
<li>jdk-7u3-linux-i586.tar.gz</li>
<li>eclipse-jee-indigo-SR2-linux-gtk.tar.gz

<h3>下载地址</h3>

<p><a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a></p></li>
</ul>


<p><a href="http://developer.android.com/sdk/eclipse-adt.html">http://developer.android.com/sdk/eclipse-adt.html</a></p>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>

<p><a href="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</a></p>

<p>将其拷贝到一个文件夹，以/home/android/为例</p>

<h2>Java环境安装配置</h2>

<h3>1.解压文件</h3>

<p>进入安装文件目录<code>cd /home/android/</code></p>

<p>在lib下创建目录用于安装<code>sudo mkdir /usr/lib/java</code></p>

<p>解压到目录下<code>sudo tar zxvf ./jdk-7u3-linux-i586.tar.gz -C /usr/lib/java/</code></p>

<h3>2.配置环境变量</h3>

<pre><code>sudo gedit /etc/bash.bashrc
</code></pre>

<p>在其中加入如下内容：</p>

<pre><code>export JAVA_HOME=/usr/lib/java/jdk1.7.0_03
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
</code></pre>

<p>保存退出，重新开启终端</p>

<h3>3.验证是否安装成功</h3>

<p>执行命令</p>

<pre><code>java -version 
</code></pre>

<p>显示</p>

<pre><code>java version "1.7.0_03" 
Java(TM) SE Runtime Environment (build 1.7.0_03-b04) 
Java HotSpot(TM) Client VM (build 22.1-b02, mixed mode)
</code></pre>

<p>说明安装成功</p>

<h2>eclipse安装</h2>

<p>进入安装文件目录<code>cd /home/android/</code></p>

<p>解压文件<code>tar zxvf eclipse-jee-indigo-SR2-linux-gtk.tar.gz</code></p>

<p>进入解压后的eclipse目录，执行eclipse文件，即可启动eclipse</p>

<h2>android SDK安装</h2>

<h3>1.解压文件</h3>

<p>进入安装文件目录<code>cd /home/android/</code></p>

<p>解压文件<code>tar zxvf android-sdk_r17-linux.tgz</code></p>

<h3>2.安装ADT插件</h3>

<p>在线安装容易连接不上网站，所以选择离线安装</p>

<p>启动 Eclipse, 在菜单栏选择 Help > Install New Software&#8230;.</p>

<p>单击右上角的Add按钮，在弹出的对话框中，Name填写 &#8220;ADT&#8221;,单击Archive按钮，找到插件所在到包ADT-17.0.0.zip，点击OK</p>

<p><img src="http://ziwu1216.github.com/images/hello-android-1-0-add.png" title="add repository" alt="图片加载失败 :("></p>

<p>选择所有安装包，点击next根据提示进行安装，同意所有条款。把Contact all update sites during install to find required software 前面的复选框取消掉，否则下载会很慢</p>

<p><img src="http://ziwu1216.github.com/images/hello-android-1-0-adt-install.png" title="ADT install" alt="图片加载失败 :("></p>

<p>安装完重启eclipse，开头的对话框可以先取消，后续会安装</p>

<p>在eclipse中选择Window > Preferences..，在弹出的对话框中左边选择Android标签，右边SDK location选择Android SDK的目录，单击apply，再单击ok。在此过程中会弹出一个对话框问你是否要参加google的满意度调查报告，可以选择参加还是不参加，单击process按钮即可</p>

<p><img src="http://ziwu1216.github.com/images/hello-android-1-0-preferences.png" title="eclipse preferences" alt="图片加载失败 :("></p>

<h3>3.配置Android SDK Manager</h3>

<p>进入android sdk安装目录下的tools目录，运行Android SDK Manager</p>

<pre><code>cd /home/android/android-sdk-linux/tools/ 
./android 
</code></pre>

<p>在tools>options选中force https……http，等待列表刷新后，选中tools和想要版本的android平台，进行安装</p>

<p><img src="http://ziwu1216.github.com/images/hello-android-1-0-sdkManager-setting.png" title="SDK Manager setting" alt="图片加载失败 :(">
<img src="http://ziwu1216.github.com/images/hello-android-1-0-sdkManager.png" title="SDK Manager" alt="图片加载失败 :("></p>

<p>*不知道为什么，从eclipse启动SDK Manager时，tools选项里没有options……推荐从目录运行</p>

<p>*一些第三方插件如htc的工具等，需要注册，可以暂时不安装</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello android 1：Linux下开发环境搭建]]></title>
    <link href="http://ziwu1216.github.com/blog/2012/11/25/hello-android-1/"/>
    <updated>2012-11-25T14:46:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2012/11/25/hello-android-1</id>
    <content type="html"><![CDATA[<p>想试试android的游戏开发，但想换台笔记本做，于是翻出了之前自己写的环境搭建入门，居然已经是半年前了……我果然没什么坚持能力……去android开发官网看了下，google在API Level 17下提供了新的ADT Bundle，集成了Eclipse和ADT plugin，意味着环境搭建被大大简化，再也不用卡在ADT安装的各种网络连接问题上了:)</p>

<p>于是新开了一个ubuntu12.04虚拟机，重新搭建了一次开发环境。根据官网所说，如果已经有eclipse或者其他IDE，可以继续使用单独的SDK安装。半年前的搭建入门在<a href="http://ziwu1216.github.com/blog/2012/11/26/old-hello-android-1-dot-0/">这里</a>,供参考</p>

<p>以下为使用ADT Bundle的具体环境搭建过程</p>

<!--more-->


<h2>需要准备的安装文件</h2>

<ul>
<li><p>adt-bundle-linux-x86.zip</p>

<p>  ADT Bundle 包括了开发环境所需的绝大多数内容</p>

<ul>
<li>Eclipse + ADT plugin</li>
<li>Android SDK Tools</li>
<li>Android Platform-tools</li>
<li>The latest Android platform</li>
<li>The latest Android system image for the emulator</li>
</ul>
</li>
<li><p>jdk-7u9-linux-i586.tar.gz</p></li>
</ul>


<p>将所有安装文件放入一个文件夹，例如~/android</p>

<h3>下载地址</h3>

<p><a href="http://developer.android.com/sdk/index.html">下载adt bundle</a></p>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">下载jdk</a></p>

<h2>Java环境安装配置</h2>

<h3>1.解压文件</h3>

<p>进入安装文件目录<code>cd ~/android/</code></p>

<p>在lib下创建目录用于安装<code>sudo mkdir /usr/lib/java</code></p>

<p>解压到目录下<code>sudo tar zxvf ./jdk-7u9-linux-i586.tar.gz -C /usr/lib/java/</code></p>

<h3>2.配置环境变量</h3>

<pre><code>sudo gedit /etc/profile
</code></pre>

<p>在其中加入如下内容：</p>

<pre><code>export JAVA_HOME=/usr/lib/java/jdk1.7.0_09
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
</code></pre>

<p>保存退出，重启ubuntu</p>

<h3>3.验证是否安装成功</h3>

<p>执行命令<code>java -version</code></p>

<p>显示</p>

<pre><code>java version "1.7.0_09"
</code></pre>

<p>说明安装成功</p>

<h2>Android Adt Bundle安装</h2>

<h3>1.解压文件</h3>

<p>进入安装文件目录<code>cd ~/android/</code></p>

<p>解压<code>unzip ./adt-bundle-linux-x86.zip</code></p>

<h3>2.首次启动</h3>

<p>进入解压后的adt-bundle-linux-x86/eclipse目录，执行eclipse文件，即可启动eclipse。第一次启动可以选择workspace和是否参加google信息收集</p>

<h2>Android SDK Manager配置</h2>

<p>Adt Bundle自带了最新版本的android平台，要开发其他平台的android程序或其他工具包，可以在SDK Manager中安装</p>

<p>进入android sdk安装目录下的tools目录，运行Android SDK Manager</p>

<pre><code>cd ~/android/adt-bundle-linux-x86/sdk/tools/
./android
</code></pre>

<p>选中所需的平台进行安装，我安装了2.3.3，这是我手机的android版本</p>

<p><img src="http://ziwu1216.github.com/images/hello-android-1-sdkManager.png" title="sdkManager" alt="图片加载失败 :("></p>

<p>在tools>options中，可以根据网络情况设置代理或选中<br/>
force https://&#8230; sources to be fetched using http://&#8230;</p>

<p>google要求必须安装的包是</p>

<ul>
<li>SDK Tools</li>
<li>SDK Platform-tools</li>
<li>SDK Platform（至少一个版本）</li>
</ul>


<p>推荐安装的包是</p>

<ul>
<li>System Image（便于使用android模拟器）</li>
<li>Android Support</li>
<li>SDK Samples</li>
</ul>

]]></content>
  </entry>
  
</feed>
