<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: interview | Jean's Blog]]></title>
  <link href="http://ziwu1216.github.com/blog/categories/interview/atom.xml" rel="self"/>
  <link href="http://ziwu1216.github.com/"/>
  <updated>2013-07-25T10:54:39+08:00</updated>
  <id>http://ziwu1216.github.com/</id>
  <author>
    <name><![CDATA[Jean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[『转载整理』C++关键字]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/05/25/keywords-in-c-plus-plus/"/>
    <updated>2013-05-25T20:30:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/05/25/keywords-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>extern,const,static</p>

<!--more-->


<h2>编译单元(模块)</h2>

<p>当在VC这样的开发工具上编写完代码，点击编译按钮准备生成exe文件时，VC其实做了两步工作</p>

<ul>
<li>第一步，将每个.cpp(.c)和相应.h文件编译成obj文件.</li>
<li>第二步，将工程中所有的obj文件进行LINK生成最终的.exe文件.</li>
</ul>


<p>那么错误就有可能在两个地方产生，一个是编译时的错误，这个主要是语法错误，另一个是连接错误，主要是重复定义变量等。</p>

<p>我们所说的编译单元就是指在编译阶段生成的每个obj文件，一个obj文件就是一个编译单元，也就是说一个cpp(.c)和它相应的.h文件共同组成了一个编译单元，一个工程由很多个编译单元组成，每个obj文件里包含了变量存储的相对地址等 。</p>

<h2>extern</h2>

<h3>修饰变量或函数</h3>

<p><a href="http://ziwu1216.github.io/blog/2013/05/24/c-plus-plus-primer-notes-2/">前面文章</a>提过了，通常，在模块的头文件中,对本模块提供给其它模块引用的函数和全局变量以关键字extern声明</p>

<p>被extern修饰的变量（外部变量）是静态分配空间的，即程序开始时分配，结束时释放。</p>

<h3>extern C</h3>

<p><code>void foo( int x, int y );</code>函数被C编译器编译后在符号库中的名字为<code>_foo</code>，而C++编译器则会产生像<code>_foo_int_int</code>之类的名字</p>

<p><code>extern C</code>告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的</p>

<p>目的：实现C++与C及其它语言的混合编程</p>

<ul>
<li>在C++中引用C语言中的函数和变量
```c
/<em> c语言头文件：cExample.h </em>/

<h1>ifndef C_EXAMPLE_H</h1>

<h1>define C_EXAMPLE_H</h1>

extern int add(int x,int y);

<h1>endif</h1></li>
</ul>


<p>/<em> c语言实现文件：cExample.c </em>/</p>

<h1>include "cExample.h"</h1>

<p>int add( int x, int y )
{
  return x + y;
}</p>

<p>// c++实现文件，调用add：cppFile.cpp
extern "C"
{
  #include "cExample.h"
}
int main(int argc, char* argv[])
{
  add(2,3);
  return 0;
}
```</p>

<ul>
<li>在C中引用C++语言中的函数和变量
```c
//C++头文件 cppExample.h

<h1>ifndef CPP_EXAMPLE_H</h1>

<h1>define CPP_EXAMPLE_H</h1>

extern "C" int add( int x, int y );

<h1>endif</h1></li>
</ul>


<p>//C++实现文件 cppExample.cpp
＃include "cppExample.h"
int add( int x, int y )
{
  return x + y;
}</p>

<p>/<em> C实现文件 cFile.c
/</em> 这样会编译出错：＃include "cExample.h" <em>/
extern int add( int x, int y );
int main( int argc, char</em> argv[] )
{
  add( 2, 3 );
  return 0;
}
```</p>

<ul>
<li>常见头文件用法
```c

<h1>ifdef __cplusplus</h1>

extern "C" {

<h1>endif</h1>

/<em>...</em>/

<h1>ifdef __cplusplus</h1>

}

<h1>endif</h1>

<p>```</p></li>
</ul>


<h2>const</h2>

<p>```c
const int r=100;//标准const变量声明加初始化，编译器经过类型检查后直接用100在编译时替换。
//比#define的好处在于有类型检查</p>

<p>char <em>const cp; //到char的const指针
char const </em>pc1; //到const char的指针
const char *pc2; //到const char的指针（后两个声明是等同的）</p>

<p>//类的const对象只能访问const成员函数，而非const对象可以访问任意的成员函数，包括const成员函数；
```</p>

<h2>static</h2>

<h3>static 局部变量</h3>

<p>生存期为这个源程序, 不过作用域仍是局部，例如函数内部的static变量</p>

<h3>static 全局变量</h3>

<p>全局变量本身就是静态存储方式, 再加上static, 是改变他的作用域, 即只能本当前文件访问</p>

<ul>
<li>extern和static不能同时修饰一个变量</li>
<li>当你在头文件中使用static声明了全局变量后，它也同时被定义了（默认初始化为0）</li>
<li>一般定义static全局变量时，都把它放在原文件中而不是头文件，这样就不会给其他模块造成不必要的信息污染</li>
</ul>


<h3>static 函数</h3>

<p>函数的默认作用域是全局可见的, 即整个源程序, 如果在函数前加上static, 表示将其作用域缩小至本文件.</p>

<h3>static成员</h3>

<p>一个static成员只有唯一的一份副本，而不像常规的非static成员那样在每个对象里各有一份副本。</p>

<h3>static成员函数</h3>

<p>一个需要访问类成员，而不需要针对特定对象去调用的函数，也被称为一个static成员函数,它只能访问类的静态成员。</p>

<p>参考链接：<br/>
<a href="http://hi.baidu.com/zyxins/item/41666937440833493075a1e5">C/C++定义全局变量/常量几种方法的区别</a> <br/>
<a href="http://blog.csdn.net/citysheep/article/details/3923073">C++中extern “C”含义深层探索</a> <br/>
<a href="http://hi.baidu.com/laodun/item/8dcebde3d4710fadcf2d4fc7">关于const,static,extern,volatile的用法</a><br/>
<a href="http://www.cnblogs.com/fxjwind/archive/2011/07/05/2098631.html">C语言易混淆关键词详解-const, static, extern, typedef, 声明</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『转载整理』new和malloc的区别]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/05/25/new-vs-malloc/"/>
    <updated>2013-05-25T17:25:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/05/25/new-vs-malloc</id>
    <content type="html"><![CDATA[<p>new可以认为是malloc加构造函数的执行</p>

<!--more-->


<p>主要区别列表如下：</p>

<table>
<thead>
<tr>
<th>new     </th>
<th>   malloc</th>
</tr>
</thead>
<tbody>
<tr>
<td>建立对象    </td>
<td>   分配内存</td>
</tr>
<tr>
<td>c或c++     </td>
<td>   c</td>
</tr>
<tr>
<td>运算符       </td>
<td>   标准库函数</td>
</tr>
<tr>
<td>保留字,不需要头文件支持      </td>
<td>   需要头文件库函数支持</td>
</tr>
<tr>
<td>分配内存+调用类的构造函数   </td>
<td>   只分配内存，不会进行初始化</td>
</tr>
<tr>
<td>自动计算需要分配的空间       </td>
<td>   手动传递字节数</td>
</tr>
<tr>
<td>返回某种数据类型指针      </td>
<td>   返回void指针</td>
</tr>
</tbody>
</table>


<p>参考链接：<br/>
<a href="http://wmnmtm.blog.163.com/blog/static/38245714201203313587/">new与malloc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『转载整理』C/C++中内存机制]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/05/17/memory-in-c-and-c-plus-plus/"/>
    <updated>2013-05-17T00:15:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/05/17/memory-in-c-and-c-plus-plus</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>在多任务操作系统中的每一个进程都运行在一个属于它自己的内存沙盘中。这个沙盘就是虚拟地址空间（virtual address space），在32位模式下它总是一个<code>4GB</code>的内存地址块。这些虚拟地址通过页表（page table）映射到物理内存，页表由操作系统维护并被处理器引用。每一个进程拥有一套属于它自己的页表，只要虚拟地址被使能，那么它就会作用于这台机器上运行的所有软件，包括内核本身，因此一部分虚拟地址必须保留给内核使用</p>

<!--more-->


<p><img src="/images/memory-in-c-and-c-plus-plus-block.png" title="程序内存块" alt="图片加载失败 :("></p>

<p>在Linux中，内核空间是持续存在的，并且在所有进程中都映射到同样的物理内存。内核代码和数据总是可寻址的，随时准备处理中断和系统调用。与此相反，用户模式地址空间的映射随进程切换的发生而不断变化</p>

<p><img src="/images/memory-in-c-and-c-plus-plus-switch.png" title="程序切换" alt="图片加载失败 :("></p>

<p>下面是一个Linux进程的标准的内存段布局</p>

<p><img src="/images/memory-in-c-and-c-plus-plus-layout.png" title="内存布局" alt="图片加载失败 :("></p>

<ul>
<li>进程地址空间中最顶部的段是栈，大多数编程语言将之用于存储局部变量和函数参数。进程中的每一个线程都有属于自己的栈。</li>
<li>在栈的下方是内存映射段。此处，内核将文件的内容直接映射到内存。任何应用程序都可以通过Linux的mmap()或Windows的CreateFileMapping() / MapViewOfFile()请求这种映射。内存映射是一种方便高效的文件I/O方式，所以它被用于加载动态库。</li>
<li>堆用于运行时内存分配。但不同点是，堆用于存储那些生存期与函数调用无关的数据。在C语言中，堆分配的接口是malloc()系列函数，而在具有垃圾收集功能的语言（如C#）中，此接口是new关键字。</li>
<li>BSS（未初始化数据区）保存的是未被初始化的静态变量内容</li>
<li>数据段保存在源代码中已经初始化了的静态变量内容</li>
<li>代码段是只读的，保存了你全部的代码外加零零碎碎的东西，比如字符串字面值。</li>
</ul>


<p>下图展示了这些段以及我们例子中的变量
<img src="/images/memory-in-c-and-c-plus-plus-example.png" title="例子展示" alt="图片加载失败 :("></p>

<h2>C语言中的内存机制</h2>

<ul>
<li><p>栈(Stack)<br/>
位于函数内的局部变量（包括函数实参），由编译器负责分配释放，函数结束，栈变量失效。</p></li>
<li><p>堆(Heap）<br/>
由程序员用malloc/calloc/realloc分配，free释放。如果程序员忘记free了，则会造成内存泄露，程序结束时该片内存会由OS回收。</p></li>
<li><p>全局区/静态区(Global Static Area)<br/>
全局变量和静态变量存放区，程序一经编译好，该区域便存在。程序结束时释放。<br/>
在C语言中，初始化的全局变量和静态变量和未初始化的放在相邻的两个区域。</p></li>
<li><p>C风格字符串常量存储区<br/>
专门存放字符串常量的地方，程序结束时释放。（字符串常量一般放在 .text段 或单独的 .rodata段）【？？？似乎跟C++的常量存储区类似。const常量是否也放在这里？】</p></li>
<li><p>程序代码区</p></li>
</ul>


<h2>C++中的内存机制</h2>

<p>与C相同部分不再描述</p>

<ul>
<li><p>栈(Stack)</p></li>
<li><p>堆（Heap)<br/>
由new申请的内存，由delete或delete[]负责释放。</p></li>
<li><p>自由存储区(Free Storage)<br/>
malloc/calloc/realloc分配的内存。对象的生存周期可以比内存被分配的时间短，即可以用void*访问这块内存，而没有具体对象。自由存储区和堆的本质区别有争议，具体可见<a href="http://hi.baidu.com/yangdgjy/item/23a3c28daa7f495c840fabb2">这里</a></p></li>
<li><p>全局区/静态区(Global Static Area)<br/>
在C++中，由于全局变量和静态变量编译器会给这些变量自动初始化赋值，所以没有区分了初始化变量和未初始化变量了</p></li>
<li><p>常量存储区<br/>
存储字符串常量和其他在编译时已知的数据。整个程序运行期间可见。只读。</p></li>
<li><p>程序代码区</p></li>
</ul>


<hr />

<p>参考链接:</p>

<p><a href="http://blog.csdn.net/drshenlei/article/details/4339110">剖析程序的内存布局</a><br/>
<a href="http://www.cnblogs.com/ComputerG/archive/2012/02/01/2334898.html">c/c++内存机制（一）（原）</a><br/>
<a href="http://www.gotw.ca/gotw/009.htm">Memory Management - Part I</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程之美 读书笔记 1]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/05/16/beauty-of-programming-1/"/>
    <updated>2013-05-16T23:29:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/05/16/beauty-of-programming-1</id>
    <content type="html"><![CDATA[<p>书籍信息：编程之美——微软技术面试心得；《编程之美》小组著；电子工业出版社</p>

<p>从第二章开始看起的，毕竟是件很功利的事情。</p>

<!--more-->


<h3>2.1</h3>

<p>用右移达到除2的效果，效率很高，可以多想想是否可以利用</p>

<p>求1的个数：var = var &amp; (var - 1)</p>

<p>用查表法，以空间换时间</p>

<p>我写的代码
```c
int findOne(unsigned var) {</p>

<pre><code>int cnt = 0;
while(var != 0) {
    var = var &amp; (var - 1);
    cnt++;
}
return cnt;
</code></pre>

<p>}
<code>
代码修改-注意注释
</code>c</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>typedef unsigned char BYTE;//常用的宏定义，unsigned int范围不进行检查的话不符合题意</p>

<p>int findOne(BYTE var) {</p>

<pre><code>int cnt = 0;
while(var) {//var!=0冗余
    var &amp;= (var - 1);//复合赋值更高效简洁
    cnt++;
}
return cnt;
</code></pre>

<p>}
int main() {</p>

<pre><code>unsigned a;//直接输入给BYTE会得到ASCII码值
BYTE b;
int c;
while(cin&gt;&gt;a) {
    if(a&gt;0xff) {
//0x前缀表示16进制数，x不区分大小写。0前缀表示8进制数。没有提供直接写2进制数的方法.
//8进制和16进制只能表达无符号的正整数
        cout&lt;&lt;"error"&lt;&lt;endl;
        continue;
    }
    b = (BYTE)a;//【？？？】是否有更恰当的方法，将输入以数字的值读入BYTE？
    c = findOne(a);
    cout&lt;&lt;c&lt;&lt;endl;
}
return 0;
</code></pre>

<p>}
```</p>

<h3>2.2</h3>

<p>在比较运算符两边（如&lt;），有符号数和无符号数要匹配</p>

<p>不小于N的数中出现能被5整除的个数：Z=[N/5]+[N/25]+[N/125]+...每5个一数，有一个数中含有因子5。而每25个一数，有一个数中含有因子25，即2个5，因为之前每5个一数时已经算过一次，所以再加一次</p>

<p>二进制最低位1的位置决定于含有因子2的个数</p>

<p>【？？？】问题2的解法二想不到</p>

<h3>2.3</h3>

<p>把问题转化为同等性质的更小规模的问题。如果某元素个数超过整个数组的一半，那么删除一对不同的元素后，此元素依然超过一半。</p>

<p>【？？？】如何传递数组和指针作为实参，引用传递，const传递等</p>

<h3>2.4</h3>

<p>找规律的题目，我所不擅长的。这里是分别考虑个位、十位、百位...</p>

<p>我写的代码
```c
unsigned long long calc(unsigned long long num) {</p>

<pre><code>unsigned long long less;
unsigned long long sum = 0;
unsigned long long factor = 1;
unsigned long long temp = num;
while(temp != 0) {
    less = temp - temp / 10 * 10;
    temp = temp/10;
    if(less == 0)
        sum += num * factor;
    else if(less == 1)
        sum += temp * factor + num - (num / factor * factor) + 1;
    else
        sum += (temp + 1) * factor;
    factor *= 10;
}
return sum;
</code></pre>

<p>}
<code>
代码修改
</code>c
unsigned long long calc(unsigned long long num) {</p>

<pre><code>unsigned long long sum = 0;
unsigned long long factor = 1;
unsigned long long lowerNum = 0;
unsigned long long currNum = 0;
unsigned long long higherNum = 0;
//改用这些变量后程序可读性增强了很多
//写程序时还是要抓住解决方案的本质，用简明的方法表达出来
//如果写的时候觉得很难表达清楚，一定是还没有理清思路，不要急着开始写程序

while(num / factor != 0) {
    lowerNum = num - num / factor * factor;
    currNum = (num / factor) % 10;
    higherNum = num / factor / 10;

    if(currNum == 0)
        sum += higherNum * factor;
    else if(currNum == 1)
        sum += higherNum * factor + lowerNum + 1;
    else
        sum += (higherNum + 1) * factor;
    factor *= 10;
}
return sum;
</code></pre>

<p>}
```
【？？？问题2实在是太绕了，没看明白】</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[笔试面试总结]]></title>
    <link href="http://ziwu1216.github.com/blog/2013/05/08/interview-summary/"/>
    <updated>2013-05-08T21:20:00+08:00</updated>
    <id>http://ziwu1216.github.com/blog/2013/05/08/interview-summary</id>
    <content type="html"><![CDATA[<p>最近开始参加笔试面试了，主要还是软件技术类的。这是一篇不断更新中的记录总纲，其实主要还是给自己看的...如果遇到要回来学习的题目什么的我会再加日志。</p>

<p>有总结才有提高。</p>

<!--more-->


<h2>企业开放日，工程师们对各个职业求职的描述(M-shz)</h2>

<h3>测试</h3>

<ul>
<li>思维比掌握了几种编程语言更重要，重点是怎么解决问题</li>
<li>网上面试100题之类的题目可以用来训练思维</li>
<li>操作系统的知识是必要的</li>
<li>软件工程的实际项目</li>
</ul>


<h3>项目经理</h3>

<ul>
<li>毕业直接做这个，比较难，因为level很低而要求control高level的人</li>
<li>从developer转过来的人也不多，因为容易注重细节没有全局观</li>
<li>需要大的视角，以及跟不同的人打交道</li>
<li>面试：产品设计、计划制定、现有产品增加功能</li>
</ul>


<h3>技术支持</h3>

<ul>
<li>电话 + 远程协助</li>
<li>好的技术功底 + 对产品的了解</li>
<li>要求英语好</li>
<li>外向一点</li>
<li>面试：英语、技术基础、逻辑、产品</li>
</ul>


<h2>笔试面试的经过和总结</h2>

<h3>软件测试实习（M-shz）</h3>

<ul>
<li>自我介绍<br/>
中途会打断，所以准备的时候要把重点放在前面说，被打断了也不可惜。不用准备很长。</li>
<li>做过的项目<br/>
对他接触过的地方比较关注，或者要求描述大概。<br/>
可以事先准备下对每个项目的总体介绍，简短说明这个项目是什么。以免到时候说得没有条理。</li>
<li>白板编程<br/>
我修改次数太多了。最好先想好再下笔，尽量考虑全各种情况。<br/>
int->正 负 零，比如传长度，不要理所当然是个非零的数，要处理负数。<br/>
也许下次可以考虑先写测试用例再写程序，这样考虑的情况会多一些。 <br/>
最好在下笔前问清题意，对一些特殊情况怎么处理。</li>
<li>一些面试题、算法题和《编程之美》之类的还是要看的，有些巧妙的解法自己很难想到。</li>
<li>学习一下测试用例应该怎么写。</li>
<li>好多C和C++里的函数不记得了，要复习一下。</li>
<li>有些题目用“双指针”的模式可以很好解决，可以训练一下这方面的思维。</li>
</ul>


<h4>主要题目</h4>

<ul>
<li>string转int的函数实现</li>
<li>寻找单链表的倒数第k个元素</li>
<li>一个数组，其中元素为struct{a,b}，其中a是排序的，如果出现连续相同a，只保留最后一个元素。如果出现连续相同b，也只保留最后一个元素。大意是这样。--双指针</li>
</ul>


<h3>软件开发实习（N-zj）</h3>

<ul>
<li>presentation</li>
<li>做过的项目<br/>
要准备下自己在这个项目中最大成就，克服的难点和学到的知识</li>
<li>对公司的认识</li>
<li>实习时间<br/>
提前准备下怎么说</li>
<li>有什么问题要提问<br/>
要准备些题目，不然冷场</li>
<li>白板编程<br/>
有意识的选择数据类型，例如longlong等平时不常用的类型很多时候需要用来表示可能很大的数据</li>
<li>上机编程<br/>
我编程太慢了，来不及，要多练习，尽量能一次成型，不要太多次调试。<br/>
上机编程以能运行和可读性为首要要求，不要太追求算法高效。</li>
</ul>


<h4>主要题目</h4>

<ul>
<li>memcpy和strcpy实现</li>
<li>malloc和new的区别</li>
<li>各种关键字修饰的变量存储在堆？栈？其他？数据类型字节数</li>
<li>扑克牌的表示和洗牌函数</li>
<li>三角形向下相邻路径最大和</li>
<li>文件读写的程序</li>
</ul>

]]></content>
  </entry>
  
</feed>
