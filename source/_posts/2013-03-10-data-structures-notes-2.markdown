---
layout: post
title: "数据结构与算法分析 读书笔记 2"
date: 2013-03-10 22:39
comments: true
categories: [c++, notes]
---
半个多月前就记了，一直都没整理……第二章

<!--more-->

##第二章 算法分析
算法是为求解一个问题需要遵循的、被清楚地指定的简单指令的集合。

###2.1 数学基础
{% img /images/data-structures-notes-2-def.PNG '定义' '图片加载失败 :('  %}
这些定义是相对增长率的比较。
  
- 大O，f是T的上界
- omega，g是T的下界
- theta，表示严格的增长率相等。  
【？？？】【为什么定义四是对所有常数？】

重要法则：{% img /images/data-structures-notes-2-rule.PNG '法则' '图片加载失败 :('  %}  
典型增长率：{% img /images/data-structures-notes-2-rate.PNG '典型增长率' '图片加载失败 :('  %}

不要将常数或低阶项放进大O

可以通过计算lim（N→+∞）f(N)/g(N)来比较函数的相对增长率（洛必达法则，分子分母求导）

###2.3 要分析的问题
分析程序的运行时间，一般需要最坏情况而非平均情况，一是因为对所有输入提供界限，二是因为平均计算起来困难。

高效算法中，数据读入常常成为瓶颈。

###2.4 运行时间计算
一般法则

- 法则1： for循环，时间至多是该循环内语句（包括测试）的运行时间乘以迭代的次数
- 法则2： 嵌套循环，从里向外分析【也是分析运行时间的基本策略】，一组嵌套循环内部的一条语句总的运行时间，为该语句时间乘以该组所有循环的大小的乘积
- 法则3： 顺序语句，将各个语句的运行时间求和
- 法则4： if/else语句，不超过判断语句时间加分支中运行较长的时间之和

递归和调用的运行时间分析举例【！！！需复习】  
令T(N)为求解大小为N的问题所花费时间，基准条件得到T(0)，T(1)等，迭代得到关系式如T(N) = 2T(N/2) + O(N),求解。【？？？】【如何求解】

####最大子序列和问题的求解 
多重求和公式计算算法复杂度【！！！需复习】

递归算法，“分治”策略，把整组数据分为左右两个子序列，考虑可能出现在左边，右边，或横跨左右。【！！！需编码】    
递归函数调用的一般形式是传递输入数组以及左边界和右边界，它们界定了数组要被处理的部分。  
【在递归中，设计传递参数很重要，书中的例子避免了子序列的拷贝，比我开始设计的参数好很多】

联机算法：在任意时刻，算法都能对它已经读入的数据给出问题的正确答案。仅需要常量空间并以线性时间运行的算法几乎是完美的算法。

####O(logN)
如果一个算法用常数时间将问题的大小削减为其一部分（通常是1/2），那么该算法就是O(logN)的。

- 二分搜索
- 欧几里得算法
- 幂运算

####检验分析
方法一是编程并比较N扩大一倍后实际运行时间与分析是否匹配。很多时候很困难。

方法二：验证是否O(f(N))，对N的某个范围计算T(N)/f(n)，T(N)是观察到的运行时间。（收敛于正常数，收敛于0，发散）【？？？】【什么是“用2的倍数隔开”】